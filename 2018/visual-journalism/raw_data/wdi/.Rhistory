data <- read_html(url) %>%
html_nodes("dd")
overall_status <- data[6] %>%
html_text()
recruit_status <- data[7]
}
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
data <- read_html(url) %>%
html_nodes("dd")
overall_status <- data[6] %>%
html_text() %>&
trimws()
recruit_status <- data[7]
}
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
data <- read_html(url) %>%
html_nodes("dd")
overall_status <- data[6] %>%
html_text() %>%
trimws()
recruit_status <- data[7]
}
trial_data <- data.frame()
View(trial_data)
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
data <- read_html(url) %>%
html_nodes("dd")
overall_status <- data[6] %>%
html_text() %>%
trimws()
recruit_status <- data[7] %>&
html_text() %>%
trimws()
data <- data.frame(overall_status,recruit_status)
}
base_url <- "http://www.isrctn.com/"
trial_data <- data.frame()
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
data <- data.frame(overall_status,recruit_status)
bind_rows(trial_data,tmp)
}
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp <- data.frame(overall_status,recruit_status)
bind_rows(trial_data,tmp)
}
View(trial_data)
trial_data <- data.frame()
names(trial_data) <- c("overall_staus","recruit_status")
trial_data <- data.frame()
names(trial_data) <- c("overall_staus","recruit_status")
trial_data <- data_frame()
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp <- data.frame(overall_status,recruit_status)
bind_rows(trial_data,tmp)
}
trial_data <- data.frame()
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp <- data.frame(overall_status,recruit_status)
trial_data <- bind_rows(trial_data,tmp)
}
View(trial_data)
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp <- data.frame(i,overall_status,recruit_status)
trial_data <- bind_rows(trial_data,tmp)
}
View(trial_data)
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd","p")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(i,overall_status,recruit_status)
trial_data <- bind_rows(trial_data,tmp2)
}
for (i in titles$id) {
url <- paste0(base_url,i)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd,p")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(i,overall_status,recruit_status)
trial_data <- bind_rows(trial_data,tmp2)
}
View(trial_data)
tmp
tmp[67]
tmp[68]
tmp[34]
tmp[35]
tmp[33]
tmp[36]
trial_data <- data.frame()
for (id in titles$id) {
url <- paste0(base_url,id)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd,p")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
recruit_start <- tml[34] %>%
html_text() %>%
trimws()
recruit_end <- tml[35] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(id,overall_status,recruit_status,recruit_start,recruit_end)
trial_data <- bind_rows(trial_data,tmp2)
}
for (id in titles$id) {
url <- paste0(base_url,id)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd,p")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
recruit_start <- tmp[34] %>%
html_text() %>%
trimws()
recruit_end <- tmp[35] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(id,overall_status,recruit_status,recruit_start,recruit_end)
trial_data <- bind_rows(trial_data,tmp2)
}
View(trial_data)
trial_data <- data.frame()
for (id in titles$id) {
url <- paste0(base_url,id)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(id,overall_status,recruit_status,recruit_start,recruit_end)
trial_data <- bind_rows(trial_data,tmp2)
}
View(trial_data)
trial_data <- data.frame()
for (id in titles$id) {
url <- paste0(base_url,id)
print(url)
tmp <- read_html(url) %>%
html_nodes("dd")
overall_status <- tmp[6] %>%
html_text() %>%
trimws()
recruit_status <- tmp[7] %>%
html_text() %>%
trimws()
tmp2 <- data.frame(id,overall_status,recruit_status)
trial_data <- bind_rows(trial_data,tmp2)
}
View(trial_data)
# load the Lahman package
library(Lahman)
Salaries <- filter(2016)
library(dplyr)
library(readr)
# convert Lahman tables to local data frames, with data for 2015 only for Teams and Salaries
Teams <- filter(Teams, yearID == 2016)
View(Teams)
Salaries <- filter(Salaries, yearID == 2016)
View(Salaries)
View(Teams)
mlb_salaries_2016 <- Salaries %>%
left_join(Master, by="playerID") %>%
left_join(Teams, by="teamID") %>%
mutate(salary_mil=salary/1000000, nameFull=paste(nameFirst, nameLast, sep=" ")) %>%
rename(teamName=name) %>%
select(playerID, nameFirst, nameLast, nameFull, teamID, teamName, salary, salary_mil)
View(mlb_salaries_2016)
# convert Lahman tables to local data frames, with data for 2015 only for Teams and Salaries
Teams <- filter(Teams, yearID == 2017)
install.packages("quantmod")
install.packages(c("backports", "broom", "curl", "devtools", "digest", "foreach", "ggiraph", "git2r", "glue", "hms", "iterators", "lazyeval", "lubridate", "Matrix", "mgcv", "officer", "openssl", "purrr", "quantmod", "raster", "Rcpp", "reshape2", "rgdal", "rgeos", "rlang", "rmarkdown", "rprojroot", "Rttf2pt1", "rvg", "stringi", "tidycensus", "tidyr", "tidyselect", "tidyverse", "webshot", "withr", "xts", "yaml"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
# convert Lahman tables to local data frames, with data for 2015 only for Teams and Salaries
Teams <- filter(Teams, yearID == 2017)
# convert Lahman tables to local data frames, with data for 2015 only for Teams and Salaries
Teams <- filter(Teams, yearID == 2016)
load("~/SpiderOak Hive/twitter_congress/analysis.RData")
### note, when combine the CSVs later, need to send screennames to lower case!!!
# load required packages
library(readr)
library(dplyr)
library(twitteR)
library(stringr)
library(lubridate)
# set working directory
# setwd("~/twitter_congress")
#################################################
# get data on members of congress, including twitter accounts, from https://github.com/unitedstates/
curr_members <- read_csv("http://theunitedstates.io/congress-legislators/legislators-current.csv")
# filter out members with no qualifying twitter account
curr_members <- curr_members %>%
filter(!is.na(twitter))
#################################################
# retrieve current members' tweets
# twitter authorization
consumer_key <- "gUdYqHriyJn8ejsBuAfmeBtFE"
consumer_secret <- "G5qSxF87kHafPuP1mzlwabVKGj14pSBvwdIEuQ9DkXGMy8GhtV"
access_token <- "589535421-vwvWXqgjGjQNnenMSDOnUPszphiMdBJm6iFsG92G"
access_secret <- "aHq7dQnZVXKsVvYXajtRlwNWDW8sUkydCGhacU6pjtUi9"
options(httr_oauth_cache=T) # this will enable the use of a local file to cache OAuth access credentials between R sessions.
setup_twitter_oauth(consumer_key,
consumer_secret,
access_token,
access_secret)
# get members' twitter timelines
members_tweets <- data_frame()
x <- 1
for (n in curr_members$twitter) {
print(paste0(n," ",x," of ",length(curr_members$twitter)))
try(tmp_list <- userTimeline(n,includeRts=T,n=500))
try(tmp <- twListToDF(tmp_list))
try(members_tweets <- bind_rows(members_tweets,tmp))
rm(tmp_list,tmp)
Sys.sleep(60)
x <- x+1
# save data every 20 members, in case of crashes
if (x%%20==0) save.image("twitter_congress_update.RData")
}
# who/what have we got?
members_tweets_summary <- members_tweets %>%
mutate(screenName = tolower(screenName)) %>%
group_by(screenName) %>%
summarise(tweets=n(),
earliest=min(created))
# anyone missing?
members_screenNames <- curr_members %>%
select(twitter) %>%
rename(screenName = twitter) %>%
mutate(screenName = tolower(screenName))
missing <- anti_join(members_screenNames,members_tweets_summary)
# processing failed accounts
members_tweets_missing <- data_frame()
x <- 1
for (n in missing$screenName) {
print(paste0(n," ",x," of ",length(missing$screenName)))
try(tmp_list <- userTimeline(n,includeRts=T,500))
try(tmp <- twListToDF(tmp_list))
try(members_tweets_missing <- bind_rows(members_tweets_missing,tmp))
rm(tmp_list,tmp)
Sys.sleep(60)
x <- x+1
}
members_tweets <- bind_rows(members_tweets,members_tweets_missing)
# save as CSV with date stamp
write.csv(members_tweets, paste0("downloads/members_tweets_",Sys.Date(),".csv"), row.names=FALSE, na="")
# who/what have we got?
members_tweets_summary <- members_tweets %>%
mutate(screenName = tolower(screenName)) %>%
group_by(screenName) %>%
summarise(tweets=n(),
earliest=min(created))
#############################################################################
# get tweets for Trump, Pence, Ryan, Pelosi, McConnell, Schumer, Sanders
# leaders <- c("realDonaldTrump","VP","SpeakerRyan","NancyPelosi","SenateMajLdr","SenSchumer","SenSanders")
leaders <- c("realDonaldTrump")
# get leaders' twitter timelines
leaders_tweets <- data_frame()
for (l in leaders) {
print(l)
try(tmp_list <- userTimeline(l,includeRts=T,n=500))
try(tmp <- twListToDF(tmp_list))
try(leaders_tweets <- bind_rows(leaders_tweets,tmp))
rm(tmp_list,tmp)
Sys.sleep(60)
}
# who/what have we got?
leaders_tweets_summary <- leaders_tweets %>%
mutate(screenName = tolower(screenName)) %>%
group_by(screenName) %>%
summarise(tweets=n(),
earliest=min(created))
leaders_screenNames <- data_frame(leaders) %>%
rename(screenName = leaders) %>%
mutate(screenName = tolower(screenName))
missing <- anti_join(leaders_screenNames,leaders_tweets_summary)
# processing failed accounts
leaders_tweets_missing <- data_frame()
x <- 1
for (n in missing$screenName) {
print(paste0(n," ",x," of ",length(missing$screenName)))
try(tmp_list <- userTimeline(n,includeRts=T,n=500))
try(tmp <- twListToDF(tmp_list))
try(leaders_tweets_missing <- bind_rows(leaders_tweets_missing,tmp))
rm(tmp_list,tmp)
Sys.sleep(60)
x <- x+1
}
leaders_tweets <- bind_rows(leaders_tweets,leaders_tweets_missing)
# bind together
tweets <- bind_rows(leaders_tweets,members_tweets) %>%
mutate(text = str_replace_all(text, "[\r\n]" , ""))
# save as CSV with timestamp
write.csv(tweets, paste0("tweets_",Sys.Date(),".csv"), na="")
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.POP.TOTL", "SP.DYN.LE00.IN")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2016, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, birth_rate=SP.DYN.CBRT.IN, neonat_mortal_rate=SH.DYN.NMRT) %>%
filter(income != "Aggregates")
# some text cleaning
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "EN.ATM.CO2E.PC")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, co2=EN.ATM.CO2E.PC) %>%
filter(income != "Aggregates") %>%
select(1,8,2:7,9,13)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
setwd("~/Dropbox/ucsc/2018/visual-journalism/raw_data/wdi")
View(indicators)
View(indicators)
nations1 <- nations %>%
select(-gdp_percap)
nations1 <- indicators %>%
select(1,9,2,3,5:8,10,14)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
View(indicators)
nations1 <- indicators %>%
select(1,9,2,3,5:8,10,14)
nations2 <- indicators %>%
select(9,3,4)
View(nations2)
nations <- indicators %>%
select(1,9,2,3,5:8,10,14,4)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "EN.ATM.CO2E.PC")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, co2=EN.ATM.CO2E.PC) %>%
filter(income != "Aggregates") %>%
select(1,8,2:7,9,13)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
nations2015 <- indicators %>%
filter(year==2015) %>%
select(-co2)
View(nations2015)
nations1 <- nations %>%
select(-gdp_percap)
nations1 <- indicators %>%
select(-gdp_percap)
View(indicators)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "EN.ATM.CO2E.PC")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, co2_percap=EN.ATM.CO2E.PC) %>%
filter(income != "Aggregates") %>%
select(1,8,2:7,9,13)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
nations2015 <- indicators %>%
filter(year==2015) %>%
select(-co2)
View(nations1)
View(nations1)
View(indicators)
View(indicators)
nations1 <- indicators %>%
select(-co2_percap)
View(indicators)
nations1 <- indicators %>%
select(-co2_percap)
nations2 <- indicators %>%
select(isoc3,year,co2_percap)
View(indicators)
nations2 <- indicators %>%
select(iso3c,year,co2_percap)
View(nations2)
View(nations1)
write.csv(nations1, "nations1.csv", na="", row.names = F)
write.csv(nations2,"nations2.csv", na="", row.names = F)
library(readr)
library(dplyr)
# load health and wealth of nations data
nations1 <- read_csv("nations_1.csv")
nations2 <- read_csv("nations_2.csv")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SP.DYN.LE00.IN", "SP.POP.TOTL", "EN.ATM.CO2E.PC")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2015, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, co2_percap=EN.ATM.CO2E.PC) %>%
filter(income != "Aggregates") %>%
select(1,8,2:7,9,13)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
nations2015 <- indicators %>%
filter(year==2015) %>%
select(-co2)
nations2 <- indicators %>%
select(iso3c,year,co2_percap)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2016, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, life_expect=SP.DYN.LE00.IN, population=SP.POP.TOTL, co2_percap=EN.ATM.CO2E.PC) %>%
filter(income != "Aggregates") %>%
select(1,8,2:7,9,13)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
nations2 <- indicators %>%
select(iso3c,year,co2_percap)
setwd("~/Dropbox/ucsc/2018/visual-journalism/raw_data/wdi")
write.csv(nations2,"nations2.csv", na="", row.names = F)
